


let Matrix = Type with:
	data    : Float[];
	lines   : Integer;
	columns : Integer;

	where Matrix(data: Float[]) do
		data = float list 'data' to block form
	end


let Natural: Type with:
	value : Integer;

	where Natrual(n: Integer) -> Natural =>
		value = n;

	where Natural() -> Natural =>
		value = 0;

	where next(Natural) -> Natural =


Algorithm next of 'a : Natural' do
	return a.value + 1
end

let b : Natural;

Algorithm 'a' + 'b' -> Matrix
input a : Matrix
input b : Matrix
return: Matrix
begin
	... Matrix sum logic
end

Algorithm 'a: Matrix' + 'b: Matrix'
return Matrix
begin
	... Matrix sum logic
end


Algorithm QR factorization of 'a: Matrix' -> Matrix
begin
	...
end

Algorithm QR factorization of 'a'
begin
	...
end



Algorithm QR factorization of 'a' -> Matrix di
	...
end

let A = matrx[3,3]()

let Q, R = QR factorization of 'A'
