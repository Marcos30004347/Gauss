name: "Release Github"

on:
  push:
    tags:
      - "v*"

jobs:
  build_test:
    name: "Build & Testing"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2

      - name: Install CMake
        run: |
          sudo apt-get install cmake

      - name: Build & Testing
        run: |
          make build_type=Debug
          make run-tests

  build_linux:
    name: "Build linux"
    needs: build_test
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2

      - name: Install CMake
        run: |
          sudo apt-get install cmake

      - name: Build
        run: |
          make build_type=Release release-local

      - uses: actions/upload-artifact@master
        with:
          name: linux
          path: releases/

  build_wasm_js:
    name: "Build WASM JS"
    needs: build_test
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2

      - name: Install CMake
        run: |
          sudo apt-get install cmake

      - name: Install Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh

      - name: Build
        run: |
          make build_type=Release emsdk_path=./emsdk release-wasm-js
      - uses: actions/upload-artifact@master
        with:
          name: wasm-js
          path: releases/wasm-js


  build_windows:
    name: "Build binaries Windows"
    needs: build_test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          choco install cmake make
          cmake --version
      - name: Configure Environment
        run: |
          make build_type=Release environment
      - name: Build
        run: |
          make build_type=Release release-local
      - uses: actions/upload-artifact@master
        with:
          name: windows
          path: releases/

  build_macos:
    name: "Build binaries MacOS"
    needs: build_test
    runs-on: "macos-latest"
    steps:
      - uses: actions/checkout@v2

      - name: Install CMake
        run: |
          brew install p7zip cmake make

      - name: Build
        run: |
          make build_type=Release release-local

      - uses: actions/upload-artifact@master
        with:
          name: macos
          path: releases/


  build_documentation:
    name: "Build documentation"
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get install texlive-latex-base
          sudo apt-get install texlive-fonts-recommended
          sudo apt-get install texlive-fonts-extra
          sudo apt-get install gsfonts-other
          sudo apt-get install doxygen
          chmod 777 ./scripts/docs.sh
      - name: Run doxygen
        run: |
          ./scripts/docs.sh
      - name: Push
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: docs
          FOLDER: docs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ({sha}) {msg}"

  tagged_release:
    runs-on: "ubuntu-latest"
    name: "Release"
    needs: [ build_wasm_js, build_documentation, build_macos, build_windows, build_linux ]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@master
        with:
          name: wasm-js
          path: wasm-js/

      - uses: actions/download-artifact@master
        with:
          name: linux
          path: linux/

      - uses: actions/download-artifact@master
        with:
          name: macos
          path: macos/

      - uses: actions/download-artifact@master
        with:
          name: windows
          path: windows/

      - name: Zip Assets
        run: |
          zip wasm-js wasm-js
          zip linux linux
          zip macos macos
          zip windows windows

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release wasm-js Assets
        id: upload-release-asset-wasm-js
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wasm-js.zip
          asset_name: wasm-js.zip
          asset_content_type: application/zip

      - name: Upload Release linux Assets
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux.zip
          asset_name: linux.zip
          asset_content_type: application/zip

      - name: Upload Release macos Assets
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos.zip
          asset_name: macos.zip
          asset_content_type: application/zip

      - name: Upload Release windows Assets
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip
