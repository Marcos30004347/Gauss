#ifndef TYPES_HPP
#define TYPES_HPP

#include <vector>
#include <cstddef>

typedef size_t key;

struct name {
	char* name;
};

name name_create(const char*);
void name_destroy(name*);


struct term {

  #define type_idx(id) (1 << 31 | id)
  #define term_idx(id) (~(1 << 31) & id)

	enum kind {
    // types
    TYPE_ANY = type_idx(1),
    TYPE_ARR = type_idx(2),
    TYPE_SYM = type_idx(3),
    TYPE_PRO = type_idx(4),
    TYPE_SUM = type_idx(5),

		// terms
		TERM_ABS = term_idx(1),
		TERM_APP = term_idx(2),
		TERM_VAR = term_idx(3),
	};

	kind term_kind;

	key term_childs_idx;
};

bool is_type(term&);
bool is_term(term&);

struct context;

context* context_create();

void context_destroy(context *s);

term &context_get_term_from_key(context *ctx, key idx);
term &context_get_child_term(context *ctx, term &t, size_t idx);

#endif
